\subsection{}

The following matrix $\mathbf{P}$ describes the air quality in a city over consecutive days. State 0, 1 and 2 denotes respectively very poor, poor and good air quality.

\begin{figure}[htbp]
    \label{P}
    \centering
    $\mathbf{Pa}$ =	\bordermatrix{
	    	~ & 0 & 1 & 2 \cr
	       0 & 0.5  & 0.35 & 0.15 \cr
	       1 & 0.1 & 0.75  & 0.15 \cr
           2 & 0.05 & 0.6 & 0.35 \cr}
\end{figure}
The probability of remaining in state 1 for two consecutive days is given by, $P(X_2=1,X_1=1|X_0=1)=P(X_2 = 1 | X_1 = 1) \cdot P(X_1 = 1 | X_0 = 1) = P_{11} \cdot P_{11} = 0.75^2 = 0.5625$. This follows from the Markov property which states that the state of $X_{n+1}$ depends only on $X_{n}$.

The probability of the air quality being poor the day after tomorrow can be expressed as $P(X_2 = 1|X_0 = 1)$. The matrix of the two - step transition probabilities is given by $\mathbf{P}^{2} = \mathbf{P}^{(1+1)} = \mathbf{P}^{(1)} \cdot  \mathbf{P}^{(1)}$. The matrix multiplication gives us the following matrix, and the probability of returning to state 1 after two steps is simply $P^{2}_{11} = 0.6875$

\begin{figure}[htbp]
    \label{PaSquared}
    \centering
    $\mathbf{P}^{2}$ =	\bordermatrix{
	    	~ & 0 & 1 & 2 \cr
	       0 & 0.2925  & 0.5275 & 0.18 \cr
	       1 & 0.1325 & 0.6875  & 0.18 \cr
           2 & 0.1025 & 0.6775 & 0.22 \cr}
\end{figure}

The long - run distribution of the Markov chain be obtained by solving the following set of equations:

\begin{equation}
    \pi_0 = \pi_0\cdot\frac{1}{2} + \pi_1\cdot\frac{1}{10} + \pi_2\cdot\frac{1}{20}
\end{equation}

\begin{equation}
    \pi_1 = \pi_0\cdot\frac{7}{20} + \pi_1\cdot\frac{3}{4} + \pi_2\cdot\frac{3}{5}
\end{equation}

\begin{equation}
    \pi_2 = \pi_0\cdot\frac{3}{20} + \pi_1\cdot\frac{3}{20} + \pi_2\cdot\frac{7}{20}
\end{equation}

\begin{equation}
    \pi_0  + \pi_1 + \pi_2 = 1
\end{equation}


Solving these equations leads to the following results: $\pi_0 = \frac{29}{192} \approx 0.1510$, $\pi_1 = \frac{127}{192} \approx 0.6615$, $\pi_2 = \frac{3}{16} \approx 0.1875$

\subsection{}

<<cache=TRUE, plot1, fig.pos="htbp", fig.cap = "Simulated long - run distribution of the Markov chain" >>=

P <- matrix(data=c(0.5,0.1,0.05,0.35,0.75,0.6,0.15,0.15,0.35), nrow= 3)
lrd <- c(0,0,0)
state <- 2
N <- 100000


for (i in 1:N){
  p <- runif(1)
  if (p < P[state,1]){
    state <- 1
  } else if (p < P[state,1] + P[state,2]){
      state <- 2
  } else {
    state <- 3
  }
  lrd[state] <- lrd[state] + 1
  #At the end of each iteration the vector - element lrd[state] is incremented 
  #by one in order to keep track of the long - run distribution of the chain. 
}

barplot(lrd/N, main="Long - run distribution",xlab="State",
ylab="Count",names.arg = c('0','1','2'))

lrd/N

@

The proportion of time the simulated Markov chain has very poor air quality is given graphically by figure \ref{fig:plot1}, and the numerical value is $\Sexpr{lrd[1]/N}$, which and is very close to the theoretical value for the long - run disitribution of state 0, which is $\pi_0 = \frac{29}{192} \approx 0.1510$. The simulated value differs from the theoretical value by $\Sexpr{round((abs((lrd[1]/N)-0.1510)/0.1510),5)*100}\ \%$. 


The number of steps used when simulating the chain will influence how well the simulated value agrees with the theoretical answer. We should find that simulated distribution gets closer to the theoretical distribution as the number of steps increases, and this seems to be the case. From looking at figure \ref{fig:plot1}, or the printed vector we see that, when using many steps, the simulated results are approaching the theoretical results. 

The long - run distributions dependency on the initial state seems to decrease as the number of steps increases.

We plot three different graphs, one for each inital state, see figure \ref{fig:plot2}, representing the proportion of time spent in state 0 for increasing N. The dependency on the inital state clearly gets smaller as N increases. 

<<cache=TRUE, plot2, fig.pos="htbp", fig.cap = "Long - run distributions of state 0 as number of steps increases. One line for each of the different initial states", fig.height = 4>>=

getlrd <- function(P, state, N){
  lrd <- c(0,0,0)
  
  for (i in 1:N){
    p <- runif(1)
    if (p < P[state,1]){
      state <- 1
    } else if (p < P[state,1] + P[state,2]){
      state <- 2
    } else {
      state <- 3
    }
    lrd[state] <- lrd[state] + 1
  }
  return(lrd/N)
}

#Defines a function that returns a vector containing the simulated
#long - run distributions for a given transition matrix, initial state and
#number of steps.


P <- matrix(data=c(0.5,0.1,0.05,0.35,0.75,0.6,0.15,0.15,0.35), nrow= 3)

xaxis <- seq(10,600,5)
avlrd <- matrix(data = 0, nrow = 3, ncol = length(xaxis))
k <- 1

for (i in xaxis){
  for (j in 1:100){
    lrd <- getlrd(P,1,i)
    avlrd[1,k] <- avlrd[1,k] + lrd[1]/100
    lrd <- getlrd(P,2,i)
    avlrd[2,k] <- avlrd[2,k] + lrd[1]/100
    lrd <- getlrd(P,3,i)
    avlrd[3,k] <- avlrd[3,k] + lrd[1]/100
  }
  k <- k + 1
}

#Finds the average value of several simulated long - run distributions.

require(ggplot2)
require(reshape)
t = data.frame(a = xaxis, '0' = avlrd[1,], '1' = avlrd[2,], '2' = avlrd[3,])
t = melt(t, id.vars = "a")
p <- ggplot(data=t, aes(x=a, y=value, group=variable, color = variable)) + 
  geom_smooth() + geom_point() 
p + labs(title = "Dependency on initial state",
         x = "Number of steps", y = "Proportion of time spent in state 0",
         colour = "Initial state") + xlim(0, 600)

@

\subsection{}\label{subsec:1c}

The following transition matrix P models the evolution of an AIDS paients condition. State 0, 1, 2 and 3 respectively represents being dead, very sick, sick and functional.

\begin{figure}[htbp]
    \label{Pc}
    \centering
    $\mathbf{P}$ =	\bordermatrix{
	    	~ & 0    & 1     & 2    & 3 \cr
	       0  & 1    & 0     & 0    & 0 \cr
	       1  & 0.05  & 0.85 & 0.1 & 0 \cr
           2  & 0 & 0.05 & 0.65 & 0.3\cr
           3  & 0    & 0   & 0  & 1   \cr}
\end{figure}

We let $P_n$ denote the probability of starting out in state $n$ and eventually becoming functional, and we let $p_{ij}$ denote the probability of moving from state $i$ to state $j$. In addition we let $\eta$ denote the event of the patient becoming functional. 

The probability of the the patient becoming functional when starting out as very sick can be expressed as 

\begin{equation}
\begin{gathered}
    P(\text{Patient becomes functional}|\text{Patient is very sick}) = P_1 = P(\eta|X_0 = 1) \\= P(\eta|X_1 = 2, X_0 = 1) + P(\eta|X_1 \neq 2, X_0 = 1) = p_{12} \cdot P_2 + p_{10} \cdot P_0 + p_{11} \cdot P_1 + p_{13} \cdot P_3 \\ = p_{12} \cdot P_2 + p_{11} \cdot P_{1}
\end{gathered}
\end{equation}

\
This follows from $p_{13}$ = 0 and $P_0$ = 0.

We also need an expression for $P_2$. This can be found in a similar manner.

\begin{equation}
    P_ 2 = P(\eta|X_0 = 2) = P(\eta|X_1 = 1, X_0 = 2) + P(\eta|X_1 \neq 1, X_0 = 2) = p_{21} \cdot P_1 + p_{22} \cdot P_2 + p_{23}
\end{equation}

\

Solving these equations lead to 

\begin{equation}
    P_1 = \frac{p_{23} \cdot p_{12}}{(1-p_{11})\cdot(1-p_{22}) - p_{12} \cdot p_{21}}
\end{equation}

\

which leads to $P_1 = 0.6316$ when the numerical values from the transition matrix are inserted.

We let $N_n$ denote the expected number of steps before we enter an absorbing state when starting in state n. $N$ is a random variable that denotes the number of steps before we reach an absorbing state.

The expected number of states before entering an absorbing state when starting in state 1 can be expressed as 

\begin{equation}
\begin{gathered}
    E(N|X_0 = 1) = N_1\\ = E(N|X_1 = 0, X_0 = 1) + E(N|X_1 = 1, X_0 = 1) + E(N|X_1 = 2, X_0 = 1) + E(N|X_1 = 3, X_0 = 1) \\= p_{10} + p_{11}(N_1 + 1) + p_{12}(N_2 + 1) 
\end{gathered}
\end{equation}

We also need the expected number of steps when starting in state 2. This can be obatained in a similar fashion as $N_1$. 

\begin{equation}
\begin{gathered}
    E(N|X_0 = 2) = N_2\\ = E(N|X_1 = 0, X_0 = 2) + E(N|X_1 = 1, X_0 = 2) + E(N|X_1 = 2, X_0 = 2) + E(N|X_1 = 3, X_0 = 2) \\= p_{23} + p_{11}(N_2 + 1) + p_{21}(N_1 + 1)
\end{gathered}
\end{equation}

Combining these equations leaves us with
\begin{equation}
    N_1 = \frac{p_{10}(1-p_{22}) + p_{11}(1 - p_{22}) + p_{12}(p_{21}+p_{23} + 1)}{(1-p_{11})(1-p_{22}) - p_{21}p_{12}}
\end{equation}

Inserting the numerical values from the transition matrix leaves us with $N_1 = 9.47368$

\subsection{}

The expecected number of steps is 9.47, as we showed in \ref{subsec:1c}. 

<<cache = TRUE>>=
P <- matrix(data = c(1,0.05,0,0,0,0.85,0.05,0,0,0.1,0.65,0,0,0,0.3,1),nrow =4)
state <- 2
N <- 0
functional = 0
dead = 0
avabsorb <- 0

for (i in 1:10000){
  while ((state != 1)&&(state != 4)){
    p <- runif(1)
    if (p < P[state,1]){
      state <- 1
    } else if (p < (P[state,1] + P[state,2])){
      state <- 2
    } else if (p < (P[state,1] + P[state,2] + P[state,3])){
      state <- 3
    } else {
      state <- 4
    }
    N <- N + 1
  }
  avabsorb <- avabsorb + N
  if (state == 1){
      dead = dead + 1
  } else if (state == 4){
      functional = functional + 1
  }
  N <- 0
  state <- 2
}

avabsorb <- avabsorb/10000

#avabsorb keeps track of how many steps is made before one enters an absorbing state
#and the while - loop is exited. 

#functional and dead keeps track of which state the loop ends in, in order to
#find the probability of ending up in it. 

avabsorb
f <- functional/(functional + dead)
f

@

The proportion of time the the simulated Markov chain ends up in the functional state is \Sexpr{f}, which is not too far from the theoretical value of 0.6316. The relative difference is \Sexpr{round((abs(f-0.6316))/0.6316,5)*100}\%.


<<cache=TRUE, plot3, fig.pos="htbp", fig.cap = "Variability in the stochastic process visualized by a boxplot">>=

P <- matrix(data = c(1,0.05,0,0,0,0.85,0.05,0,0,0.1,0.65,0,0,0,0.3,1),nrow =4)
state <- 2
N <- 0
avabsorb <- 0
Nvec <- numeric(500)
xaxis <- seq(1,500,1)

for (i in 1:500){
  while ((state != 1)&&(state != 4)){
    p <- runif(1)
    if (p < P[state,1]){
      state <- 1
    } else if (p < (P[state,1] + P[state,2])){
      state <- 2
    } else if (p < (P[state,1] + P[state,2] + P[state,3])){
      state <- 3
    } else {
      state <- 4
    }
    N <- N + 1
  }
  Nvec[i] <- N
  N <- 0
  state <- 2
}

boxplot(Nvec, main = "Steps before entering absorbing state",
ylab = "Number of steps")

@

When simulating the Markov chain 500 times we observe that the amount of steps before entering an absorbing state can differ from the expected value by a relatively high amount of steps. We have found the expected value to be 9.47, but during the simulation we see that values as high as \Sexpr{max(Nvec)} occur. 



